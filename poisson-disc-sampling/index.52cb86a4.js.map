{"mappings":"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","sources":["node_modules/gl-matrix/esm/mat4.js","node_modules/gl-matrix/esm/common.js","node_modules/gl-matrix/esm/vec2.js","node_modules/gl-matrix/esm/vec3.js"],"sourcesContent":["import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;","/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {ReadonlyVec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the source vector\n * @returns {vec2} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to ceil\n * @returns {vec2} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to floor\n * @returns {vec2} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to round\n * @returns {vec2} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\n * Calculates the length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to negate\n * @returns {vec2} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to invert\n * @returns {vec2} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to normalize\n * @returns {vec2} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2d} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat3} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {ReadonlyVec2} a The vec2 point to rotate\n * @param {ReadonlyVec2} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec2} out\n */\n\nexport function rotate(out, a, b, rad) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(rad),\n      cosC = Math.cos(rad); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\n * Get the angle between two 2D vectors\n * @param {ReadonlyVec2} a The first operand\n * @param {ReadonlyVec2} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1],\n      // mag is the product of the magnitudes of a and b\n  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),\n      // mag &&.. short circuits if mag == 0\n  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec2 to zero\n *\n * @param {vec2} out the receiving vector\n * @returns {vec2} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec2(\" + a[0] + \", \" + a[1] + \")\";\n}\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\n * Alias for {@link vec2.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();"],"names":["$amnUE","parcelRequire","$26675c4f95835ef1$export$185802fd694ee1f5","out","ARRAY_TYPE","Float32Array","$26675c4f95835ef1$export$9cd59f9826255e47","a","$26675c4f95835ef1$export$784d13d8ee351f07","$26675c4f95835ef1$export$a82be99ed2a44a7d","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","$26675c4f95835ef1$export$adaa4cf7ef1b65be","$26675c4f95835ef1$export$f0954fd7d5368655","$26675c4f95835ef1$export$9cb09a71b7d66923","a01","a02","a03","a12","a13","a23","$26675c4f95835ef1$export$6897c284b6f9f4dc","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","$26675c4f95835ef1$export$33f3c024b4ae00a1","$26675c4f95835ef1$export$a04698f914c55ed9","$26675c4f95835ef1$export$2060d2db72cce88f","b","b0","b1","b2","b3","$26675c4f95835ef1$export$d73ee8ef04f5226a","v","x","y","z","$26675c4f95835ef1$export$dcdf75081b88279d","$26675c4f95835ef1$export$bb628a54ab399bc9","rad","axis","s","c","t","b12","b20","b21","b22","len","Math","hypot","EPSILON","sin","cos","$26675c4f95835ef1$export$a59c8716592e09af","$26675c4f95835ef1$export$cf71e4d4ca4d1cfd","$26675c4f95835ef1$export$ea6eae3365de5b9c","$26675c4f95835ef1$export$bc9e79e74e9fddf6","$26675c4f95835ef1$export$832ca188ffb1955d","$26675c4f95835ef1$export$926fc125ff3c666c","$26675c4f95835ef1$export$dd47cc2f828c32ef","$26675c4f95835ef1$export$7dc997d67d2b7f33","$26675c4f95835ef1$export$ad5ddaedc8f405df","$26675c4f95835ef1$export$9545ac307f2a256b","q","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","$26675c4f95835ef1$export$ff497f2be31cc6a","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","$26675c4f95835ef1$export$202e99f82f7f0395","mat","$26675c4f95835ef1$export$71dc54d92bd04b57","$26675c4f95835ef1$export$df3937d3b537df0a","scaling","is1","is2","is3","sm11","sm12","sm13","sm21","sm22","sm23","sm31","sm32","sm33","trace","S","sqrt","$26675c4f95835ef1$export$ddf9c55c9f2be172","sx","sy","sz","$26675c4f95835ef1$export$1def1f860edc4b1f","o","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","$26675c4f95835ef1$export$2ff2bbe382249af7","yx","zx","zy","$26675c4f95835ef1$export$89b5708c387cac6c","left","right","bottom","top","near","far","rl","tb","nf","$26675c4f95835ef1$export$4cf19729ec9a96b8","fovy","aspect","f","tan","Infinity","$26675c4f95835ef1$export$541149539f3a4684","$26675c4f95835ef1$export$294bba99a6af0c0c","$26675c4f95835ef1$export$58ae211c788e338f","fov","upTan","upDegrees","PI","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","$26675c4f95835ef1$export$c5f65ef3eb668f27","lr","bt","$26675c4f95835ef1$export$4f2167e613cfc87b","$26675c4f95835ef1$export$b1d31ea7b4d854e","$26675c4f95835ef1$export$d924e14fd6d9aa66","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","abs","$26675c4f95835ef1$export$aa67782f4dc9e52c","target","$26675c4f95835ef1$export$42d51816ce590c93","$26675c4f95835ef1$export$326827e8268e9cdb","$26675c4f95835ef1$export$e16d8520af44a096","$26675c4f95835ef1$export$4e2d2ead65e5f7e3","$26675c4f95835ef1$export$c697bed75648cdb7","$26675c4f95835ef1$export$553579f63bdd7137","scale1","$26675c4f95835ef1$export$f2599a5cf1109d8","$26675c4f95835ef1$export$e9bab7fafb253603","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","a14","a15","b4","b5","b6","b7","b8","b9","b13","b14","b15","max","$26675c4f95835ef1$export$6e3a27864ab166fe","$26675c4f95835ef1$export$f93b5905241a7cca","$78ae820aa9ececfa$export$fd293b15f47e270","$78ae820aa9ececfa$export$b67359430d3b1b2","Array","$78ae820aa9ececfa$export$5ada478c8a628231","random","i","arguments","length","$4ce98914b6676340$export$185802fd694ee1f5","$4ce98914b6676340$export$9cd59f9826255e47","$4ce98914b6676340$export$a82be99ed2a44a7d","$4ce98914b6676340$export$784d13d8ee351f07","$4ce98914b6676340$export$adaa4cf7ef1b65be","$4ce98914b6676340$export$e16d8520af44a096","$4ce98914b6676340$export$4e2d2ead65e5f7e3","$4ce98914b6676340$export$2060d2db72cce88f","$4ce98914b6676340$export$cd007d971a5a2143","$4ce98914b6676340$export$803ce6b71a0a94b2","ceil","$4ce98914b6676340$export$a3fe094919f356fd","floor","$4ce98914b6676340$export$96ec731ed4dcb222","min","$4ce98914b6676340$export$8960430cfd85939f","$4ce98914b6676340$export$2077e0241d6afd3c","round","$4ce98914b6676340$export$dcdf75081b88279d","$4ce98914b6676340$export$19cedf1da84ba854","$4ce98914b6676340$export$9f17032d917177de","$4ce98914b6676340$export$88e6ebb4fe54f538","$4ce98914b6676340$export$f24224f1c91d8156","$4ce98914b6676340$export$ab44e1323ffc8376","$4ce98914b6676340$export$aef51622e549b8b0","$4ce98914b6676340$export$70ae2c07e401031b","$4ce98914b6676340$export$a3295358bff77e","len1","$4ce98914b6676340$export$94132a0e348806d4","$4ce98914b6676340$export$bb646b20bb93d339","$4ce98914b6676340$export$3a89f8d6f6bf6c9f","$4ce98914b6676340$export$4385e60b38654f68","scale2","r","RANDOM","$4ce98914b6676340$export$b732428d73874bfc","m","$4ce98914b6676340$export$3e55bc4b3707dfd3","$4ce98914b6676340$export$f0bfa0a0024626ee","$4ce98914b6676340$export$5ffbd13800309d59","$4ce98914b6676340$export$bb628a54ab399bc9","p0","p1","sinC","cosC","$4ce98914b6676340$export$944b09d2ad10b378","mag","cosine","acos","$4ce98914b6676340$export$7f9972325ebfd559","$4ce98914b6676340$export$42d51816ce590c93","$4ce98914b6676340$export$f2599a5cf1109d8","$4ce98914b6676340$export$e9bab7fafb253603","vec","$4ce98914b6676340$export$fc1400facf92c78","$4ce98914b6676340$export$f93b5905241a7cca","$4ce98914b6676340$export$6e3a27864ab166fe","$4ce98914b6676340$export$159d9494db57879b","$4ce98914b6676340$export$6c4a311cc157c764","$4ce98914b6676340$export$2422cd6c492a8b3a","$4ce98914b6676340$export$99d8dd3f32a3435","$4ce98914b6676340$export$4b80e395e36b5a56","stride","offset","count","fn","arg","l","$ab7f6dc0910e1ef7$export$185802fd694ee1f5","$ab7f6dc0910e1ef7$export$9cd59f9826255e47","$ab7f6dc0910e1ef7$export$f24224f1c91d8156","$ab7f6dc0910e1ef7$export$a82be99ed2a44a7d","$ab7f6dc0910e1ef7$export$784d13d8ee351f07","$ab7f6dc0910e1ef7$export$adaa4cf7ef1b65be","$ab7f6dc0910e1ef7$export$e16d8520af44a096","$ab7f6dc0910e1ef7$export$4e2d2ead65e5f7e3","$ab7f6dc0910e1ef7$export$2060d2db72cce88f","$ab7f6dc0910e1ef7$export$cd007d971a5a2143","$ab7f6dc0910e1ef7$export$803ce6b71a0a94b2","$ab7f6dc0910e1ef7$export$a3fe094919f356fd","$ab7f6dc0910e1ef7$export$96ec731ed4dcb222","$ab7f6dc0910e1ef7$export$8960430cfd85939f","$ab7f6dc0910e1ef7$export$2077e0241d6afd3c","$ab7f6dc0910e1ef7$export$dcdf75081b88279d","$ab7f6dc0910e1ef7$export$19cedf1da84ba854","$ab7f6dc0910e1ef7$export$9f17032d917177de","$ab7f6dc0910e1ef7$export$88e6ebb4fe54f538","$ab7f6dc0910e1ef7$export$ab44e1323ffc8376","$ab7f6dc0910e1ef7$export$aef51622e549b8b0","$ab7f6dc0910e1ef7$export$70ae2c07e401031b","$ab7f6dc0910e1ef7$export$a3295358bff77e","$ab7f6dc0910e1ef7$export$94132a0e348806d4","$ab7f6dc0910e1ef7$export$bb646b20bb93d339","$ab7f6dc0910e1ef7$export$3a89f8d6f6bf6c9f","$ab7f6dc0910e1ef7$export$ae8865616f30561c","d","factorTimes2","factor1","factor2","factor3","factor4","$ab7f6dc0910e1ef7$export$b9c5f84610baddaf","inverseFactor","inverseFactorTimesTwo","$ab7f6dc0910e1ef7$export$4385e60b38654f68","zScale","$ab7f6dc0910e1ef7$export$5ffbd13800309d59","$ab7f6dc0910e1ef7$export$f0bfa0a0024626ee","$ab7f6dc0910e1ef7$export$c32adef9e939ce85","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","$ab7f6dc0910e1ef7$export$a59c8716592e09af","p","$ab7f6dc0910e1ef7$export$cf71e4d4ca4d1cfd","$ab7f6dc0910e1ef7$export$ea6eae3365de5b9c","$ab7f6dc0910e1ef7$export$944b09d2ad10b378","$ab7f6dc0910e1ef7$export$7f9972325ebfd559","$ab7f6dc0910e1ef7$export$42d51816ce590c93","$ab7f6dc0910e1ef7$export$f2599a5cf1109d8","$ab7f6dc0910e1ef7$export$e9bab7fafb253603","$ab7f6dc0910e1ef7$export$f93b5905241a7cca","$ab7f6dc0910e1ef7$export$6e3a27864ab166fe","$ab7f6dc0910e1ef7$export$159d9494db57879b","$ab7f6dc0910e1ef7$export$6c4a311cc157c764","$ab7f6dc0910e1ef7$export$2422cd6c492a8b3a","$ab7f6dc0910e1ef7$export$fc1400facf92c78","$ab7f6dc0910e1ef7$export$99d8dd3f32a3435","$ab7f6dc0910e1ef7$export$4b80e395e36b5a56"],"version":3,"file":"index.52cb86a4.js.map"}