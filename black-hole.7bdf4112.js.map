{"version":3,"sources":["utils.ts","black-hole/index.ts"],"names":[],"mappings":";AAAa,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,SAAA,EAAA,QAAA,IAAM,SAAC,GACV,IAAA,EAAQ,YAAY,MAMtB,EAAY,sBALF,SAAR,EAAS,GAEX,EADa,EAAY,GAEzB,EAAY,sBAAsB,KAI/B,OAAA,WAAM,OAAA,qBAAqB;;ACoBtC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA7BA,IAAA,EAAA,QAAA,YAGM,EAA4B,SAAS,eAAe,QAAU,SAAS,cAAc,UAE3F,EAAO,MAAQ,EAAO,YACtB,EAAO,OAAS,EAAO,aAEvB,IAAM,EAAgC,EAAO,WAAW,OAAS,IAAI,yBAE/D,EAAO,SAAC,EAAW,EAAW,EAAW,GAAc,MAAA,OAAO,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,KACjF,EAAW,SAAC,GAA6B,OAAA,SAAC,GAAuB,OAAA,EAAO,KAAL,KAEnE,EAAS,EAAS,SAAC,GACb,IAAA,EAAkB,EAAM,MAAjB,EAAW,EAAM,OAChC,EAAI,UAAU,EAAG,EAAG,EAAO,GACtB,IAAA,IAAI,EAAI,EAAG,EAAI,IAAK,IAAK,CAC1B,EAAI,UAAY,EAAM,GAAG,EAAG,EAAE,EAAG,EAAG,EAAE,EAAE,IAClC,IAAA,EAAI,KAAO,EAAO,GAAK,EAAI,KAAK,IAAI,EAAI,GACxC,EAAa,EAAQ,EAAK,EAAI,KAAK,IAAI,GACvC,EAAa,EAAS,EAAK,IAAO,EAAI,EAAI,KAAK,IAAI,GAAK,IAAI,GAC5D,EAA0B,EAAd,KAAK,IAAI,GACrB,EAAY,EAClB,EAAI,SAAS,EAAG,EAAG,EAAG,MAI1B,EAAc,EAAA,IAAI,GAEtB,OAAO,SAAW,WACd,EAAO,MAAQ,EAAO,YACtB,EAAO,OAAS,EAAO,aAEvB,IACA,EAAc,EAAA,IAAI","file":"black-hole.7bdf4112.js","sourceRoot":"../src","sourcesContent":["export const run = (update: (time: number) => void) => {\n    const start = performance.now();\n    const frame = (timestamp: number) => {\n        const time = timestamp - start;\n        update(time);\n        requestId = requestAnimationFrame(frame)\n    };\n    let requestId = requestAnimationFrame(frame)\n\n    return () => cancelAnimationFrame(requestId);\n}\n","import {run} from '../utils';\n\n\nconst canvas = <HTMLCanvasElement>document.getElementById(\"app\") || document.createElement('canvas');\n\ncanvas.width = canvas.clientWidth;\ncanvas.height = canvas.clientHeight;\n\nconst ctx: CanvasRenderingContext2D = canvas.getContext('2d') || new CanvasRenderingContext2D();\n\nconst RGBA = (r: number, g: number, b: number, a: number) => `rgb(${r}, ${g}, ${b}, ${a})`\nconst toSecond = (f: (time: number) => void)=> (time: number): void => f(time*0.001)\n\nconst update = toSecond((time: number) => {\n    const { width, height } = canvas;\n    ctx.clearRect(0, 0, width, height);\n    for (let i = 1; i < 2e3; i++) {\n        ctx.fillStyle = RGBA( 99*i, 2*i, i, i?1:.4 );\n        const F = 260 * (time + 9) / i + Math.sin(i * i);\n        const x: number = (width / 2) + i * Math.sin(F);\n        const y: number = (height / 2) + .2 * ( 2 * i * Math.cos(F) + 2e4/i );\n        const w: number = Math.sin(i) * 9;\n        const h: number = w;\n        ctx.fillRect(x, y, w, h);\n    }\n})\n\nlet unsubscribe = run(update);;\n\nwindow.onresize = () => {\n    canvas.width = canvas.clientWidth;\n    canvas.height = canvas.clientHeight;\n\n    unsubscribe();\n    unsubscribe = run(update);\n}\n"]}