{"mappings":"AACcA,WACb,MAAMC,EAASC,SAASC,cAAc,UAEtC,GAAe,OAAXF,EACH,MAAM,IAAIG,MAAM,kBAGjB,IAAKC,UAAUC,IACd,MAAM,IAAIF,MAAM,yCAGjB,MAAMG,QAAgBF,UAAUC,IAAIE,iBACpC,IAAKD,EACJ,MAAM,IAAIH,MAAM,oCAGjB,MAAMK,QAAeF,EAAQG,gBAEvBC,EAAUV,EAAOW,WAAW,UAClC,GAAgB,OAAZD,EACH,MAAM,IAAIP,MAAM,mBAGjB,MAAMS,EAAeR,UAAUC,IAAIQ,2BACnCH,EAAQI,UAAU,C,OACjBN,EACAO,OAAQH,IAIT,MAAMI,EAAW,IAAIC,aAAa,EAEjC,IACA,GACA,IACA,GACA,GACA,IAEA,IACA,GACA,GACA,IACA,GACA,KAEKC,EAAeV,EAAOW,aAAa,CACxCC,MAAO,gBACPC,KAAML,EAASM,WAEfC,MAAOC,eAAeC,OAASD,eAAeE,WAE/ClB,EAAOmB,MAAMC,YAAYV,EAAc,EAAGF,GAE1C,MAUMa,EAAmBrB,EAAOsB,mBAAmB,CAClDV,MAAO,cACPW,KAAM,mUAccvB,EAAOwB,qBAAqB,CAChDZ,MAAO,gBACPa,OAAQ,OACRC,OAAQ,CACPC,OAAQN,EACRO,WAAY,aACZC,QAAS,CAhCuC,CACjDC,YAAa,EACbC,WAAY,CAAC,CACZxB,OAAQ,YACRyB,OAAQ,EACRC,eAAgB,OA6BjBC,SAAU,CACTP,OAAQN,EACRO,WAAY,eACZO,QAAS,CAAC,CACT5B,OAAQH,OAKKJ,EAAOoC,uBAEFC,gBAAgB,CACpCC,iBAAkB,CAAC,CAClBC,KAAMrC,EAAQsC,oBAAoBC,aAClCC,OAAQ,QACRC,QAAS,WAEX,EAKDC","sources":["src/index.ts"],"sourcesContent":["\nconst start = async () => {\n\tconst canvas = document.querySelector('canvas');\n\n\tif (canvas === null) {\n\t\tthrow new Error('Canvas is null');\n\t}\n\n\tif (!navigator.gpu) {\n\t\tthrow new Error('WebGPU not supported on this browser.');\n\t}\n\n\tconst adapter = await navigator.gpu.requestAdapter();\n\tif (!adapter) {\n\t\tthrow new Error('No appropriate GPUAdapter found.');\n\t}\n\n\tconst device = await adapter.requestDevice();\n\n\tconst context = canvas.getContext('webgpu');\n\tif (context === null) {\n\t\tthrow new Error('Context is null');\n\t}\n\n\tconst canvasFormat = navigator.gpu.getPreferredCanvasFormat();\n\tcontext.configure({\n\t\tdevice,\n\t\tformat: canvasFormat,\n\t});\n\n\t// Create a buffer with the vertices for a single cell.\n\tconst vertices = new Float32Array([\n\t\t//   X,    Y\n\t\t-0.8,\n\t\t-0.8, // Triangle 1\n\t\t0.8,\n\t\t-0.8,\n\t\t0.8,\n\t\t0.8,\n\n\t\t-0.8,\n\t\t-0.8, // Triangle 2\n\t\t0.8,\n\t\t0.8,\n\t\t-0.8,\n\t\t0.8,\n\t]);\n\tconst vertexBuffer = device.createBuffer({\n\t\tlabel: 'Cell vertices',\n\t\tsize: vertices.byteLength,\n\t\t// eslint-disable-next-line no-bitwise\n\t\tusage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,\n\t});\n\tdevice.queue.writeBuffer(vertexBuffer, 0, vertices);\n\n\tconst vertexBufferLayout: GPUVertexBufferLayout = {\n\t\tarrayStride: 8,\n\t\tattributes: [{\n\t\t\tformat: 'float32x2',\n\t\t\toffset: 0,\n\t\t\tshaderLocation: 0, // Position. Matches @location(0) in the @vertex shader.\n\t\t}],\n\t};\n\n\t// Create the shader that will render the cells.\n\tconst cellShaderModule = device.createShaderModule({\n\t\tlabel: 'Cell shader',\n\t\tcode: `\n\t\t\t\t\t\t@vertex\n\t\t\t\t\t\tfn vertexMain(@location(0) position: vec2f) -> @builtin(position) vec4f {\n\t\t\t\t\t\t\treturn vec4f(position, 0, 1);\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t@fragment\n\t\t\t\t\t\tfn fragmentMain() -> @location(0) vec4f {\n\t\t\t\t\t\t\treturn vec4f(1, 0, 0, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t`,\n\t});\n\n\t// Create a pipeline that renders the cell.\n\tconst cellPipeline = device.createRenderPipeline({\n\t\tlabel: 'Cell pipeline',\n\t\tlayout: 'auto',\n\t\tvertex: {\n\t\t\tmodule: cellShaderModule,\n\t\t\tentryPoint: 'vertexMain',\n\t\t\tbuffers: [vertexBufferLayout],\n\t\t},\n\t\tfragment: {\n\t\t\tmodule: cellShaderModule,\n\t\t\tentryPoint: 'fragmentMain',\n\t\t\ttargets: [{\n\t\t\t\tformat: canvasFormat,\n\t\t\t}],\n\t\t},\n\t});\n\n\tconst encoder = device.createCommandEncoder();\n\n\tconst pass = encoder.beginRenderPass({\n\t\tcolorAttachments: [{\n\t\t\tview: context.getCurrentTexture().createView(),\n\t\t\tloadOp: 'clear',\n\t\t\tstoreOp: 'store',\n\t\t}],\n\t});\n};\n\nexport {};\n// eslint-disable-next-line @typescript-eslint/no-floating-promises\nstart();\n"],"names":["async","canvas","document","querySelector","Error","navigator","gpu","adapter","requestAdapter","device","requestDevice","context","getContext","canvasFormat","getPreferredCanvasFormat","configure","format","vertices","Float32Array","vertexBuffer","createBuffer","label","size","byteLength","usage","GPUBufferUsage","VERTEX","COPY_DST","queue","writeBuffer","cellShaderModule","createShaderModule","code","createRenderPipeline","layout","vertex","module","entryPoint","buffers","arrayStride","attributes","offset","shaderLocation","fragment","targets","createCommandEncoder","beginRenderPass","colorAttachments","view","getCurrentTexture","createView","loadOp","storeOp","$b4e14b6b8da86996$var$start"],"version":3,"file":"index.1370d0af.js.map"}