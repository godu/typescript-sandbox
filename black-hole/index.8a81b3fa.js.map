{"mappings":"AAAO,MAAMA,EAAOC,IAChB,MAAMC,EAAQC,YAAYC,MACpBC,EAASC,IAEXL,EADaK,EAAYJ,GAEzBK,EAAYC,sBAAsBH,IAEtC,IAAIE,EAAYC,sBAAsBH,GAEtC,MAAO,IAAMI,qBAAqBF,ICNhCG,EAASC,SAA4BC,eAAe,QAAUD,SAASE,cAAc,UAE3FH,EAAOI,MAAQJ,EAAOK,YACtBL,EAAOM,OAASN,EAAOO,aAEvB,MAAMC,EAAgCR,EAAOS,WAAW,OAAS,IAAIC,yBAK/DC,GAFYC,EAEOC,IACrB,MAAMT,MAAEA,EAAKE,OAAEA,GAAWN,EAC1BQ,EAAIM,UAAU,EAAG,EAAGV,EAAOE,GAC3B,IAAK,IAAIS,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC1BP,EAAIQ,UAPiD,OAO/B,GAAGD,MAAG,EAAEA,MAAGA,MAAGA,EAAE,EAAE,MACxC,MAAME,EAAI,KAAOJ,EAAO,GAAKE,EAAIG,KAAKC,IAAIJ,EAAIA,GACxCK,EAAYhB,EAAS,EAAKW,EAAIG,KAAKC,IAAIF,GACvCI,EAAYf,EAAU,EAAK,IAAO,EAAIS,EAAIG,KAAKI,IAAIL,GAAK,IAAIF,GAC5DQ,EAA0B,EAAdL,KAAKC,IAAIJ,GACrBS,EAAYD,EAClBf,EAAIiB,SAASL,EAAGC,EAAGE,EAAGC,KAZkBX,GAAuBD,EAAO,KAALC,IAAxD,IAACD,EAgBlB,IAAIc,EAAcpC,EAAIqB,GAEtBgB,OAAOC,SAAW,KACd5B,EAAOI,MAAQJ,EAAOK,YACtBL,EAAOM,OAASN,EAAOO,aAEvBmB,IACAA,EAAcpC,EAAIqB","sources":["src/utils.ts","src/black-hole/index.ts"],"sourcesContent":["export const run = (update: (time: number) => void) => {\n    const start = performance.now();\n    const frame = (timestamp: number) => {\n        const time = timestamp - start;\n        update(time);\n        requestId = requestAnimationFrame(frame)\n    };\n    let requestId = requestAnimationFrame(frame)\n\n    return () => cancelAnimationFrame(requestId);\n}\n","import {run} from '../utils';\n\n\nconst canvas = <HTMLCanvasElement>document.getElementById(\"app\") || document.createElement('canvas');\n\ncanvas.width = canvas.clientWidth;\ncanvas.height = canvas.clientHeight;\n\nconst ctx: CanvasRenderingContext2D = canvas.getContext('2d') || new CanvasRenderingContext2D();\n\nconst RGBA = (r: number, g: number, b: number, a: number) => `rgb(${r}, ${g}, ${b}, ${a})`\nconst toSecond = (f: (time: number) => void)=> (time: number): void => f(time*0.001)\n\nconst update = toSecond((time: number) => {\n    const { width, height } = canvas;\n    ctx.clearRect(0, 0, width, height);\n    for (let i = 1; i < 2e3; i++) {\n        ctx.fillStyle = RGBA( 99*i, 2*i, i, i?1:.4 );\n        const F = 260 * (time + 9) / i + Math.sin(i * i);\n        const x: number = (width / 2) + i * Math.sin(F);\n        const y: number = (height / 2) + .2 * ( 2 * i * Math.cos(F) + 2e4/i );\n        const w: number = Math.sin(i) * 9;\n        const h: number = w;\n        ctx.fillRect(x, y, w, h);\n    }\n})\n\nlet unsubscribe = run(update);;\n\nwindow.onresize = () => {\n    canvas.width = canvas.clientWidth;\n    canvas.height = canvas.clientHeight;\n\n    unsubscribe();\n    unsubscribe = run(update);\n}\n"],"names":["$df5bef30413a053b$export$889ea624f2cb2c57","update","start","performance","now","frame","timestamp","requestId","requestAnimationFrame","cancelAnimationFrame","$c54ad364ea144141$var$canvas","document","getElementById","createElement","width","clientWidth","height","clientHeight","$c54ad364ea144141$var$ctx","getContext","CanvasRenderingContext2D","$c54ad364ea144141$var$update","f","time","clearRect","i","fillStyle","F","Math","sin","x","y","cos","w","h","fillRect","$c54ad364ea144141$var$unsubscribe","window","onresize"],"version":3,"file":"index.8a81b3fa.js.map"}