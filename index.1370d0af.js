(async()=>{const t=document.querySelector("canvas");if(null===t)throw new Error("Canvas is null");if(!navigator.gpu)throw new Error("WebGPU not supported on this browser.");const e=await navigator.gpu.requestAdapter();if(!e)throw new Error("No appropriate GPUAdapter found.");const r=await e.requestDevice(),n=t.getContext("webgpu");if(null===n)throw new Error("Context is null");const a=navigator.gpu.getPreferredCanvasFormat();n.configure({device:r,format:a});const o=new Float32Array([-.8,-.8,.8,-.8,.8,.8,-.8,-.8,.8,.8,-.8,.8]),i=r.createBuffer({label:"Cell vertices",size:o.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});r.queue.writeBuffer(i,0,o);const s=r.createShaderModule({label:"Cell shader",code:"\n\t\t\t\t\t\t@vertex\n\t\t\t\t\t\tfn vertexMain(@location(0) position: vec2f) -> @builtin(position) vec4f {\n\t\t\t\t\t\t\treturn vec4f(position, 0, 1);\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t@fragment\n\t\t\t\t\t\tfn fragmentMain() -> @location(0) vec4f {\n\t\t\t\t\t\t\treturn vec4f(1, 0, 0, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t"});r.createRenderPipeline({label:"Cell pipeline",layout:"auto",vertex:{module:s,entryPoint:"vertexMain",buffers:[{arrayStride:8,attributes:[{format:"float32x2",offset:0,shaderLocation:0}]}]},fragment:{module:s,entryPoint:"fragmentMain",targets:[{format:a}]}}),r.createCommandEncoder().beginRenderPass({colorAttachments:[{view:n.getCurrentTexture().createView(),loadOp:"clear",storeOp:"store"}]})})();
//# sourceMappingURL=index.1370d0af.js.map
