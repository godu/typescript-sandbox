{"mappings":"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","sources":["src/webgl/cube/index.ts","src/webgl/utils.ts","src/utils.ts","src/webgl/cube/index.vert","src/webgl/cube/index.frag"],"sourcesContent":["import { mat4, vec3 } from 'gl-matrix';\nimport vertexShaderSource from './index.vert';\nimport fragmentShaderSource from './index.frag';\nimport { createProgram } from '../utils';\nimport { run } from '../../utils';\n\nconst toggle = <HTMLButtonElement>document.getElementById('toggle');\nif (toggle === null) throw new TypeError('toggle');\n\nconst canvas = <HTMLCanvasElement>document.getElementById('app');\nif (canvas === null) throw new TypeError('canvas');\n\nconst gl = canvas.getContext('webgl');\nif (gl === null) throw new TypeError('webgl');\n\nlet width = canvas.width = canvas.clientWidth;\nlet height = canvas.height = canvas.clientHeight;\nlet rpp = 0.000001 * Math.sqrt(height * height + width * width);\ngl.viewport(0, 0, canvas.clientWidth, canvas.clientHeight);\nwindow.onresize = function () { // reset canvas size when window size is changed\n    width = canvas.width = canvas.clientWidth;\n    height = canvas.height = canvas.clientHeight;\n    rpp = 0.000001 * Math.sqrt(height * height + width * width);\n    gl.viewport(0, 0, canvas.clientWidth, canvas.clientHeight);\n}\n\nfunction draw(gl: WebGLRenderingContext) {\n    const prog = createProgram(gl, vertexShaderSource, fragmentShaderSource);\n    gl.useProgram(prog);\n\n    /* Get the locations for shader program variables */\n    const aCoords = gl.getAttribLocation(prog, \"coords\");\n    const uModelview = gl.getUniformLocation(prog, \"modelview\");\n    const uProjection = gl.getUniformLocation(prog, \"projection\");\n    const uColor = gl.getUniformLocation(prog, \"color\");\n\n    /* Create buffers to hold data for the attribute variables. */\n    const aCoordsBuffer = gl.createBuffer();\n\n    gl.enable(gl.DEPTH_TEST);\n    gl.enable(gl.CULL_FACE);\n\n    const projection = mat4.create();\n    const modelview = mat4.create();\n\n    let rotateX = 0.4;   // rotation of cube about the x-axis\n    let rotateY = -0.5;  // rotation of cube about the y-axis\n    let rotateZ = 0;  // rotation of cube about the y-axis\n\n    const modelTransformation = mat4.create();\n\n    mat4.rotateX(modelTransformation, modelTransformation, rotateX);\n    mat4.rotateY(modelTransformation, modelTransformation, rotateY);\n    mat4.rotateZ(modelTransformation, modelTransformation, rotateZ);\n\n    function drawPrimitive(primitiveType: number, color: Float32List, vertices: number[]) {\n        gl.enableVertexAttribArray(aCoords);\n        gl.bindBuffer(gl.ARRAY_BUFFER, aCoordsBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STREAM_DRAW);\n        gl.uniform4fv(uColor, color);\n        gl.vertexAttribPointer(aCoords, 3, gl.FLOAT, false, 0, 0);\n        gl.drawArrays(primitiveType, 0, vertices.length / 3);\n    }\n\n    let prevEvent: MouseEvent | TouchEvent | null = null;\n    function start(event: MouseEvent | TouchEvent) {\n        prevEvent = event;\n    }\n    function move(event: MouseEvent | TouchEvent) {\n\n        if (window.MouseEvent && event instanceof MouseEvent && prevEvent instanceof MouseEvent) {\n            const diffTransformation = mat4.create();\n            mat4.invert(diffTransformation, modelTransformation);\n            const angle = vec3.fromValues((event.y - prevEvent.y), (event.x - prevEvent.x), 0);\n            mat4.rotate(diffTransformation, diffTransformation, vec3.length(angle) * rpp, angle)\n            mat4.multiply(diffTransformation, diffTransformation, modelTransformation)\n            mat4.multiply(modelTransformation, modelTransformation, diffTransformation);\n            prevEvent = event;\n        }\n        if (window.TouchEvent && event instanceof TouchEvent && prevEvent instanceof TouchEvent) {\n            const diffTransformation = mat4.create();\n            mat4.invert(diffTransformation, modelTransformation);\n            const angle = vec3.fromValues((event.touches[0].clientY - prevEvent.touches[0].clientY), (event.touches[0].clientX - prevEvent.touches[0].clientX), 0);\n            mat4.rotate(diffTransformation, diffTransformation, vec3.length(angle) * rpp, angle)\n            mat4.multiply(diffTransformation, diffTransformation, modelTransformation)\n            mat4.multiply(modelTransformation, modelTransformation, diffTransformation);\n            prevEvent = event;\n        }\n    }\n    function stop(event: MouseEvent | TouchEvent) {\n        prevEvent = null;\n    }\n    canvas.addEventListener('mousedown', start);\n    canvas.addEventListener('mousemove', move);\n    canvas.addEventListener('mouseup', stop);\n    canvas.addEventListener('mouseleave', stop);\n    canvas.addEventListener('touchstart', start);\n    canvas.addEventListener('touchmove', move);\n    canvas.addEventListener('touchend', stop);\n    canvas.addEventListener('touchcancel', stop);\n\n    let perspective = true;\n    toggle.addEventListener('click', () => {\n        perspective = !perspective;\n    });\n\n    return function (time: number) {\n        gl.clearColor(0, 0, 0, 1);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n        const aspect = canvas.width / canvas.height;\n        if (perspective)\n            mat4.perspective(projection, Math.PI / 4, aspect, 4, 8);\n        else {\n            const top = Math.max(2.5 / aspect, 2.5);\n            const right = Math.max(2.5 * aspect, 2.5);\n            mat4.ortho(projection, -right, right, -top, top, 4, 8);\n        }\n\n        gl.uniformMatrix4fv(uProjection, false, projection);\n\n        mat4.lookAt(modelview, [0, 0, 6], [0, 0, 0], [0, 1, 0]);\n        mat4.multiply(modelview, modelview, modelTransformation);\n        gl.uniformMatrix4fv(uModelview, false, modelview);\n\n        drawPrimitive(gl.TRIANGLE_FAN, [0, 1, 0, 1], [-1, -1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1]);\n        drawPrimitive(gl.TRIANGLE_FAN, [1, 0, 0, 1], [-1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1]);\n        drawPrimitive(gl.TRIANGLE_FAN, [0, 0, 1, 1], [-1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1]);\n        drawPrimitive(gl.TRIANGLE_FAN, [1, 1, 0, 1], [-1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1]);\n        drawPrimitive(gl.TRIANGLE_FAN, [1, 0, 1, 1], [1, -1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1]);\n        drawPrimitive(gl.TRIANGLE_FAN, [0, 1, 1, 1], [-1, -1, -1, -1, -1, 1, -1, 1, 1, -1, 1, -1]);\n        gl.lineWidth(4);\n        drawPrimitive(gl.LINES, [1, 0, 0, 1], [-2, 0, 0, 2, 0, 0]);\n        drawPrimitive(gl.LINES, [0, 1, 0, 1], [0, -2, 0, 0, 2, 0]);\n        drawPrimitive(gl.LINES, [0, 0, 1, 1], [0, 0, -2, 0, 0, 2]);\n        gl.lineWidth(1);\n    };\n};\n\nrun(draw(gl))\n","\n/* Creates a program for use in the WebGL context gl, and returns the\n * identifier for that program.  If an error occurs while compiling or\n * linking the program, an exception of type String is thrown.  The error\n * string contains the compilation or linking error.  If no error occurs,\n * the program identifier is the return value of the function.\n */\nexport function createProgram(gl: WebGLRenderingContext, vertexShaderSource: string, fragmentShaderSource: string) {\n    const vsh = gl.createShader(gl.VERTEX_SHADER);\n    if (vsh === null) throw new TypeError('vsh');\n    gl.shaderSource(vsh, vertexShaderSource);\n    gl.compileShader(vsh);\n    if (!gl.getShaderParameter(vsh, gl.COMPILE_STATUS)) {\n        throw new Error(\"Error in vertex shader : \" + gl.getShaderInfoLog(vsh));\n    }\n\n\n    const fsh = gl.createShader(gl.FRAGMENT_SHADER);\n    if (fsh === null) throw new TypeError('fsh');\n    gl.shaderSource(fsh, fragmentShaderSource);\n    gl.compileShader(fsh);\n    if (!gl.getShaderParameter(fsh, gl.COMPILE_STATUS)) {\n        throw new Error(\"Error in fragment shader : \" + gl.getShaderInfoLog(fsh));\n    }\n\n    const program = gl.createProgram();\n    if (program === null) throw new TypeError('program');\n    gl.attachShader(program, vsh);\n    gl.attachShader(program, fsh);\n    gl.linkProgram(program);\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n        throw new Error(\"Link error in program:  \" + gl.getProgramInfoLog(program));\n    }\n\n    return program;\n}\n","export const run = (update: (time: number) => void) => {\n    const start = performance.now();\n    const frame = (timestamp: number) => {\n        const time = timestamp - start;\n        update(time);\n        requestId = requestAnimationFrame(frame)\n    };\n    let requestId = requestAnimationFrame(frame)\n\n    return () => cancelAnimationFrame(requestId);\n}\n","attribute vec3 coords;\nuniform mat4 modelview;\nuniform mat4 projection;\nvoid main() {\n    vec4 coords = vec4(coords,1.0);\n    vec4 transformedVertex = modelview * coords;\n    gl_Position = projection * transformedVertex;\n}\n","precision mediump float;\nuniform vec4 color;\nvoid main() {\n    gl_FragColor = color;\n}\n"],"names":["$6yEsn","parcelRequire","$6256d6387c5c3b86$export$327d24a04cd0dc17","gl","vertexShaderSource","fragmentShaderSource","vsh","createShader","VERTEX_SHADER","TypeError","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","Error","getShaderInfoLog","fsh","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","$e94f129038f52f7c$var$toggle","document","getElementById","$e94f129038f52f7c$var$canvas","$e94f129038f52f7c$var$gl","getContext","$e94f129038f52f7c$var$width","width","clientWidth","$e94f129038f52f7c$var$height","height","clientHeight","$e94f129038f52f7c$var$rpp","Math","sqrt","viewport","window","onresize","update","start","performance","now","frame","timestamp","requestId","requestAnimationFrame","gl1","prog","$parcel$interopDefault","useProgram","aCoords","getAttribLocation","uModelview","getUniformLocation","uProjection","uColor","aCoordsBuffer","createBuffer","enable","DEPTH_TEST","CULL_FACE","projection","mat4","create","modelview","modelTransformation","drawPrimitive","primitiveType","color","vertices","enableVertexAttribArray","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STREAM_DRAW","uniform4fv","vertexAttribPointer","FLOAT","drawArrays","length","rotateX","rotateY","rotateZ","prevEvent","event","move","MouseEvent","diffTransformation","invert","angle","vec3","fromValues","y","x","rotate","multiply","TouchEvent","touches","clientY","clientX","stop","addEventListener","perspective","time","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","aspect","PI","top","max","right","ortho","uniformMatrix4fv","lookAt","TRIANGLE_FAN","lineWidth","LINES","$e94f129038f52f7c$var$draw"],"version":3,"file":"index.165fad64.js.map"}