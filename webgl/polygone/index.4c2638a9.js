function r(r){return r&&r.__esModule?r.default:r}const e=document.getElementById("plus");if(null===e)throw new TypeError("plus");const t=document.getElementById("minus");if(null===t)throw new TypeError("minus");const o=document.getElementById("app");if(null===o)throw new TypeError("canvas");const n=o.getContext("webgl");if(null===n)throw new TypeError("webgl");o.width=o.clientWidth,o.height=o.clientHeight,n.viewport(0,0,o.clientWidth,o.clientHeight),window.onresize=function(){o.width=o.clientWidth,o.height=o.clientHeight,n.viewport(0,0,o.clientWidth,o.clientHeight)};const i=function(r,e,t){const o=r.createShader(r.VERTEX_SHADER);if(null===o)throw new TypeError("vsh");if(r.shaderSource(o,e),r.compileShader(o),!r.getShaderParameter(o,r.COMPILE_STATUS))throw new Error("Error in vertex shader : "+r.getShaderInfoLog(o));const n=r.createShader(r.FRAGMENT_SHADER);if(null===n)throw new TypeError("fsh");if(r.shaderSource(n,t),r.compileShader(n),!r.getShaderParameter(n,r.COMPILE_STATUS))throw new Error("Error in fragment shader : "+r.getShaderInfoLog(n));const i=r.createProgram();if(null===i)throw new TypeError("program");if(r.attachShader(i,o),r.attachShader(i,n),r.linkProgram(i),!r.getProgramParameter(i,r.LINK_STATUS))throw new Error("Link error in program:  "+r.getProgramInfoLog(i));return i}(n,r("#define GLSLIFY 1\nattribute vec2 coords;\nattribute vec3 vertexColor;\nvarying vec3 color;\n\nvoid main() {\n    gl_Position = vec4( coords.x, coords.y, 0.0, 1.0 );\n    color = vertexColor;\n}\n"),r("precision mediump float;\n#define GLSLIFY 1\n\nuniform vec3 color;\n\nvoid main() {\n    gl_FragColor = vec4( color.r, color.g, color.b, 1.0 );\n}\n"));let a=n.getUniformLocation(i,"color"),c=n.getAttribLocation(i,"coords"),l=n.createBuffer();n.useProgram(i),(r=>{const e=performance.now(),t=n=>{r(n-e),o=requestAnimationFrame(t)};let o=requestAnimationFrame(t)})(function(r){let o=3;return t.addEventListener("click",(()=>{o=Math.max(3,o-1)})),e.addEventListener("click",(()=>{o++})),function(e){r.clearColor(0,0,0,1),r.clear(r.COLOR_BUFFER_BIT|r.DEPTH_BUFFER_BIT),r.uniform3f(a,1,0,1);const t=o+1,n=new Float32Array(2*t);for(let r=0,i=0;r<t;r++)i=2*Math.PI/o*r+Math.PI/2+Math.PI*e*.001,n[2*r]=.8*Math.cos(i),n[2*r+1]=.8*Math.sin(i);r.enableVertexAttribArray(c),r.bindBuffer(r.ARRAY_BUFFER,l),r.bufferData(r.ARRAY_BUFFER,n,r.STREAM_DRAW),r.vertexAttribPointer(c,2,r.FLOAT,!1,0,0),r.drawArrays(r.TRIANGLE_FAN,0,t)}}(n));
//# sourceMappingURL=index.4c2638a9.js.map
