{"mappings":"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","sources":["src/webgl/utils.ts","src/utils.ts","src/webgl/bubble/index.ts","src/webgl/bubble/index.vert","src/webgl/bubble/index.frag"],"sourcesContent":["\n/* Creates a program for use in the WebGL context gl, and returns the\n * identifier for that program.  If an error occurs while compiling or\n * linking the program, an exception of type String is thrown.  The error\n * string contains the compilation or linking error.  If no error occurs,\n * the program identifier is the return value of the function.\n */\nexport function createProgram(gl: WebGLRenderingContext, vertexShaderSource: string, fragmentShaderSource: string) {\n    const vsh = gl.createShader(gl.VERTEX_SHADER);\n    if (vsh === null) throw new TypeError('vsh');\n    gl.shaderSource(vsh, vertexShaderSource);\n    gl.compileShader(vsh);\n    if (!gl.getShaderParameter(vsh, gl.COMPILE_STATUS)) {\n        throw new Error(\"Error in vertex shader : \" + gl.getShaderInfoLog(vsh));\n    }\n\n\n    const fsh = gl.createShader(gl.FRAGMENT_SHADER);\n    if (fsh === null) throw new TypeError('fsh');\n    gl.shaderSource(fsh, fragmentShaderSource);\n    gl.compileShader(fsh);\n    if (!gl.getShaderParameter(fsh, gl.COMPILE_STATUS)) {\n        throw new Error(\"Error in fragment shader : \" + gl.getShaderInfoLog(fsh));\n    }\n\n    const program = gl.createProgram();\n    if (program === null) throw new TypeError('program');\n    gl.attachShader(program, vsh);\n    gl.attachShader(program, fsh);\n    gl.linkProgram(program);\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n        throw new Error(\"Link error in program:  \" + gl.getProgramInfoLog(program));\n    }\n\n    return program;\n}\n","export const run = (update: (time: number) => void) => {\n    const start = performance.now();\n    const frame = (timestamp: number) => {\n        const time = timestamp - start;\n        update(time);\n        requestId = requestAnimationFrame(frame)\n    };\n    let requestId = requestAnimationFrame(frame)\n\n    return () => cancelAnimationFrame(requestId);\n}\n","import vertexShaderSource from './index.vert';\nimport fragmentShaderSource from './index.frag';\nimport { createProgram } from '../utils';\nimport { run } from '../../utils';\n\nconst canvas = <HTMLCanvasElement>document.getElementById('app');\nif (canvas === null) throw new TypeError('canvas');\nconst gl = canvas.getContext('webgl');\nif (gl === null) throw new TypeError('webgl');\n\ncanvas.width = canvas.clientWidth;\ncanvas.height = canvas.clientHeight;\ngl.viewport(0, 0, canvas.clientWidth, canvas.clientHeight);\nwindow.onresize = function () { // reset canvas size when window size is changed\n    canvas.width = canvas.clientWidth;\n    canvas.height = canvas.clientHeight;\n    gl.viewport(0, 0, canvas.clientWidth, canvas.clientHeight);\n}\n\nfunction draw(gl: WebGLRenderingContext) {\n    const prog = createProgram(gl, vertexShaderSource, fragmentShaderSource);\n\n    /* Get the locations for shader program variables */\n    const aCoords = gl.getAttribLocation(prog, \"coords\");\n    const aColor = gl.getAttribLocation(prog, \"color\");\n    const aPointSize = gl.getAttribLocation(prog, \"pointSize\");\n\n    /* Create buffers to hold data for the attribute variables. */\n    const aColorBuffer = gl.createBuffer();\n    const aCoordsBuffer = gl.createBuffer();\n    const aPointSizeBuffer = gl.createBuffer();\n\n\n    const POINT_COUNT = 200;\n    const POINTSIZE_MIN = 50;\n    const POINTSIZE_MAX = 255;  // maximum possible value, since I'm using Uint8Array for the point sizes\n    const ALPHA_MIN = 0.2;\n    const ALPHA_MAX = 0.7;\n    const SPEED_MIN = 0.005;\n    const SPEED_MAX = 0.015;\n\n    const coords = new Float32Array(2 * POINT_COUNT);\n    const velocities = new Float32Array(2 * POINT_COUNT);\n    const colors = new Float32Array(4 * POINT_COUNT);\n    const pointSizes = new Uint8Array(POINT_COUNT);\n\n    /* Set up data arrays. */\n    for (let i = 0; i < POINT_COUNT; i++) {\n        pointSizes[i] = Math.round(POINTSIZE_MIN + (POINTSIZE_MAX - POINTSIZE_MIN)*Math.random());\n        coords[2*i] = -1 + 2*Math.random();\n        coords[2*i+1] = -1 + 2*Math.random();\n        const speed = SPEED_MIN + (SPEED_MAX - SPEED_MIN)*Math.random();\n        const angle = 2*Math.PI*Math.random();\n        velocities[2*i] = Math.cos(angle) * speed;\n        velocities[2*i+1] = Math.sin(angle) * speed;\n        colors[4*i] = Math.random();\n        colors[4*i+1] = Math.random();\n        colors[4*i+2] = Math.random();\n        colors[4*i+3] = ALPHA_MIN + (ALPHA_MAX - ALPHA_MIN)*Math.random();\n    }\n\n    /* Load color and point sizes into the buffers; this data doesn't change after initialization. */\n    gl.enableVertexAttribArray(aColor);\n    gl.bindBuffer(gl.ARRAY_BUFFER, aColorBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, colors, gl.STATIC_DRAW);\n    gl.vertexAttribPointer(aColor, 4, gl.FLOAT, false, 0, 0);\n    gl.enableVertexAttribArray(aPointSize);\n    gl.bindBuffer(gl.ARRAY_BUFFER, aPointSizeBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, pointSizes, gl.STATIC_DRAW);\n    gl.vertexAttribPointer(aPointSize, 1, gl.UNSIGNED_BYTE, false, 0, 0);\n\n    gl.useProgram(prog);\n\n    gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ZERO, gl.ONE);\n    gl.enable(gl.BLEND);\n\n\n\n    return function (time: number) {\n        for (let i = 0; i < coords.length; i++) {\n            coords[i] += velocities[i]\n            if (coords[i] < -1) {\n                coords[i] = -1;\n                velocities[i] = Math.abs(velocities[i]);\n            }\n            if (coords[i] > 1) {\n                coords[i] = 1;\n                velocities[i] = -Math.abs(velocities[i]);\n            }\n        }\n\n        gl.clearColor(1,1,1,1);\n        gl.clear(gl.COLOR_BUFFER_BIT);\n\n        gl.enableVertexAttribArray(aCoords);\n        gl.bindBuffer(gl.ARRAY_BUFFER, aCoordsBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, coords, gl.STREAM_DRAW);\n        gl.vertexAttribPointer(aCoords, 2, gl.FLOAT, false, 0, 0);\n\n        gl.drawArrays(gl.POINTS, 0, POINT_COUNT);\n    };\n};\n\nrun(draw(gl))\n","attribute vec2 coords;\nattribute vec4 color;\nattribute float pointSize;\nvarying vec4 vColor;\nvoid main() {\n    vColor = color;\n    gl_Position = vec4( coords, 0.0, 1.0 );\n    gl_PointSize = pointSize;\n}\n","precision mediump float;\nvarying vec4 vColor;\nvoid main() {\n    float dist = distance( vec2(0.5,0.5), gl_PointCoord );\n    if ( dist > 0.5 ) {\n       discard;\n    }\n    gl_FragColor = vColor;\n}\n"],"names":["$6256d6387c5c3b86$export$327d24a04cd0dc17","gl","vertexShaderSource","fragmentShaderSource","vsh","createShader","VERTEX_SHADER","TypeError","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","Error","getShaderInfoLog","fsh","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","$dfa1ff26d8886331$var$canvas","document","getElementById","$dfa1ff26d8886331$var$gl","getContext","width","clientWidth","height","clientHeight","viewport","window","onresize","update","start","performance","now","frame","timestamp","requestId","requestAnimationFrame","gl1","prog","$parcel$interopDefault","aCoords","getAttribLocation","aColor","aPointSize","aColorBuffer","createBuffer","aCoordsBuffer","aPointSizeBuffer","POINT_COUNT","coords","Float32Array","velocities","colors","pointSizes","Uint8Array","i1","Math","round","random","speed","angle","PI","cos","sin","enableVertexAttribArray","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","vertexAttribPointer","FLOAT","UNSIGNED_BYTE","useProgram","blendFuncSeparate","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","ZERO","ONE","enable","BLEND","time","i","length","abs","clearColor","clear","COLOR_BUFFER_BIT","STREAM_DRAW","drawArrays","POINTS","$dfa1ff26d8886331$var$draw"],"version":3,"file":"index.36d868cf.js.map"}