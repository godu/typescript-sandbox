{"version":3,"sources":["webgl/polygone/index.vert","webgl/polygone/index.frag","webgl/utils.ts","utils.ts","webgl/polygone/index.ts"],"names":["module","exports"],"mappings":";AAAAA,OAAOC,QAAQ;;ACAfD,OAAOC,QAAQ;;ACOf,aAAA,SAAgB,EAAc,EAA2B,EAA4B,GAC3E,IAAA,EAAM,EAAG,aAAa,EAAG,eAC3B,GAAQ,OAAR,EAAc,MAAM,IAAI,UAAU,OAGlC,GAFJ,EAAG,aAAa,EAAK,GACrB,EAAG,cAAc,IACZ,EAAG,mBAAmB,EAAK,EAAG,gBACzB,MAAA,IAAI,MAAM,4BAA8B,EAAG,iBAAiB,IAIhE,IAAA,EAAM,EAAG,aAAa,EAAG,iBAC3B,GAAQ,OAAR,EAAc,MAAM,IAAI,UAAU,OAGlC,GAFJ,EAAG,aAAa,EAAK,GACrB,EAAG,cAAc,IACZ,EAAG,mBAAmB,EAAK,EAAG,gBACzB,MAAA,IAAI,MAAM,8BAAgC,EAAG,iBAAiB,IAGlE,IAAA,EAAU,EAAG,gBACf,GAAY,OAAZ,EAAkB,MAAM,IAAI,UAAU,WAItC,GAHJ,EAAG,aAAa,EAAS,GACzB,EAAG,aAAa,EAAS,GACzB,EAAG,YAAY,IACV,EAAG,oBAAoB,EAAS,EAAG,aAC9B,MAAA,IAAI,MAAM,2BAA6B,EAAG,kBAAkB,IAG/D,OAAA,EA3BX,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,mBAAA,EAAA,QAAA,cAAA;;ACPa,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,SAAA,EAAA,QAAA,IAAM,SAAC,GACV,IAAA,EAAQ,YAAY,MAMtB,EAAY,sBALF,SAAR,EAAS,GAEX,EADa,EAAY,GAEzB,EAAY,sBAAsB,KAI/B,OAAA,WAAM,OAAA,qBAAqB;;AC+DtC,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAxEA,IAAA,EAAA,EAAA,QAAA,iBACA,EAAA,EAAA,QAAA,iBACA,EAAA,QAAA,YACA,EAAA,QAAA,eAEM,EAA0B,SAAS,eAAe,QACxD,GAAa,OAAT,EAAe,MAAM,IAAI,UAAU,QAEvC,IAAM,EAA2B,SAAS,eAAe,SACzD,GAAc,OAAV,EAAgB,MAAM,IAAI,UAAU,SAExC,IAAM,EAA4B,SAAS,eAAe,OAC1D,GAAe,OAAX,EAAiB,MAAM,IAAI,UAAU,UAEzC,IAAM,EAAK,EAAO,WAAW,SAC7B,GAAW,OAAP,EAAa,MAAM,IAAI,UAAU,SAErC,EAAO,MAAQ,EAAO,YACtB,EAAO,OAAS,EAAO,aACvB,EAAG,SAAS,EAAG,EAAG,EAAO,YAAa,EAAO,cAC7C,OAAO,SAAW,WACd,EAAO,MAAQ,EAAO,YACtB,EAAO,OAAS,EAAO,aACvB,EAAG,SAAS,EAAG,EAAG,EAAO,YAAa,EAAO,eAGjD,IAAM,EAAU,EAAA,cAAc,EAAI,EAAA,QAAoB,EAAA,SAElD,EAAS,EAAG,mBAAmB,EAAS,SACxC,EAAU,EAAG,kBAAkB,EAAS,UAExC,EAAgB,EAAG,eAIvB,SAAS,EAAK,GAGN,IAAA,EAAe,EAQZ,OAPP,EAAM,iBAAiB,QAAS,WAC5B,EAAe,KAAK,IAAI,EAAG,EAAe,KAE9C,EAAK,iBAAiB,QAAS,WAC3B,MAGG,SAAS,GAChB,EAAG,WAAW,EAAG,EAAG,EAAG,GACvB,EAAG,MAAM,EAAG,iBAAmB,EAAG,kBAElC,EAAG,UAAW,EAAQ,EAAG,EAAG,GAKvB,IAHC,IAAA,EAAc,EAAe,EAC7B,EAAW,IAAI,aAAa,EAAI,GAE7B,EAAI,EAAG,EAAQ,EAAG,EAAI,EAAa,IACxC,EAAS,EAAI,KAAK,GAAK,EAAgB,EAAK,KAAK,GAAK,EAAM,KAAK,GAAK,EAAO,KAC7E,EAAS,EAAI,GAAK,GAAM,KAAK,IAAI,GACjC,EAAS,EAAI,EAAI,GAAK,GAAM,KAAK,IAAI,GAGzC,EAAG,wBAAwB,GAE3B,EAAG,WAAW,EAAG,aAAc,GAC/B,EAAG,WAAW,EAAG,aAAc,EAAU,EAAG,aAE5C,EAAG,oBAAoB,EAAS,EAAG,EAAG,OAAO,EAAO,EAAG,GAEvD,EAAG,WAAW,EAAG,aAAc,EAAG,IAnCtC,EAAG,WAAW,GAuCd,EAAA,IAAI,EAAK","file":"polygone.91305d9c.js","sourceRoot":"../src","sourcesContent":["module.exports=\"#define GLSLIFY 1\\nattribute vec2 coords;\\nattribute vec3 vertexColor;\\nvarying vec3 color;\\n\\nvoid main() {\\n    gl_Position = vec4( coords.x, coords.y, 0.0, 1.0 );\\n    color = vertexColor;\\n}\\n\";","module.exports=\"precision mediump float;\\n#define GLSLIFY 1\\n\\nuniform vec3 color;\\n\\nvoid main() {\\n    gl_FragColor = vec4( color.r, color.g, color.b, 1.0 );\\n}\\n\";","\n/* Creates a program for use in the WebGL context gl, and returns the\n * identifier for that program.  If an error occurs while compiling or\n * linking the program, an exception of type String is thrown.  The error\n * string contains the compilation or linking error.  If no error occurs,\n * the program identifier is the return value of the function.\n */\nexport function createProgram(gl: WebGLRenderingContext, vertexShaderSource: string, fragmentShaderSource: string) {\n    const vsh = gl.createShader(gl.VERTEX_SHADER);\n    if (vsh === null) throw new TypeError('vsh');\n    gl.shaderSource(vsh, vertexShaderSource);\n    gl.compileShader(vsh);\n    if (!gl.getShaderParameter(vsh, gl.COMPILE_STATUS)) {\n        throw new Error(\"Error in vertex shader : \" + gl.getShaderInfoLog(vsh));\n    }\n\n\n    const fsh = gl.createShader(gl.FRAGMENT_SHADER);\n    if (fsh === null) throw new TypeError('fsh');\n    gl.shaderSource(fsh, fragmentShaderSource);\n    gl.compileShader(fsh);\n    if (!gl.getShaderParameter(fsh, gl.COMPILE_STATUS)) {\n        throw new Error(\"Error in fragment shader : \" + gl.getShaderInfoLog(fsh));\n    }\n\n    const program = gl.createProgram();\n    if (program === null) throw new TypeError('program');\n    gl.attachShader(program, vsh);\n    gl.attachShader(program, fsh);\n    gl.linkProgram(program);\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n        throw new Error(\"Link error in program:  \" + gl.getProgramInfoLog(program));\n    }\n\n    return program;\n}\n","export const run = (update: (time: number) => void) => {\n    const start = performance.now();\n    const frame = (timestamp: number) => {\n        const time = timestamp - start;\n        update(time);\n        requestId = requestAnimationFrame(frame)\n    };\n    let requestId = requestAnimationFrame(frame)\n\n    return () => cancelAnimationFrame(requestId);\n}\n","import vertexShaderSource from './index.vert';\nimport fragmentShaderSource from './index.frag';\nimport { createProgram } from '../utils';\nimport {run} from '../../utils';\n\nconst plus = <HTMLButtonElement>document.getElementById('plus');\nif (plus === null) throw new TypeError('plus');\n\nconst minus = <HTMLButtonElement>document.getElementById('minus');\nif (minus === null) throw new TypeError('minus');\n\nconst canvas = <HTMLCanvasElement>document.getElementById('app');\nif (canvas === null) throw new TypeError('canvas');\n\nconst gl = canvas.getContext('webgl');\nif (gl === null) throw new TypeError('webgl');\n\ncanvas.width = canvas.clientWidth;\ncanvas.height = canvas.clientHeight;\ngl.viewport(0, 0, canvas.clientWidth, canvas.clientHeight);\nwindow.onresize = function () { // reset canvas size when window size is changed\n    canvas.width = canvas.clientWidth;\n    canvas.height = canvas.clientHeight;\n    gl.viewport(0, 0, canvas.clientWidth, canvas.clientHeight);\n}\n\nconst program = createProgram(gl, vertexShaderSource, fragmentShaderSource);\n\nlet uColor = gl.getUniformLocation(program, \"color\")\nlet aCoords = gl.getAttribLocation(program, \"coords\");\n\nlet aCoordsBuffer = gl.createBuffer();\n\ngl.useProgram(program);\n\nfunction draw(gl: WebGLRenderingContext) {\n\n\n    let polygonSides = 3;\n    minus.addEventListener('click', () => {\n        polygonSides = Math.max(3, polygonSides - 1);\n    });\n    plus.addEventListener('click', () => {\n        polygonSides++;\n    });\n\n    return function(time: number) {\n    gl.clearColor(0, 0, 0, 1);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    gl.uniform3f( uColor, 1, 0, 1 ); // Red\n\n    const vertexCount = polygonSides + 1;\n    const vertices = new Float32Array(2 * vertexCount);\n\n    for (let i = 0, angle = 0; i < vertexCount; i++) {\n        angle = (2 * Math.PI / polygonSides) * i + (Math.PI / 2) + (Math.PI * time * 0.001);\n        vertices[2 * i] = 0.8 * Math.cos(angle);\n        vertices[2 * i + 1] = 0.8 * Math.sin(angle);\n    }\n\n    gl.enableVertexAttribArray(aCoords);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, aCoordsBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STREAM_DRAW);\n\n    gl.vertexAttribPointer(aCoords, 2, gl.FLOAT, false, 0, 0);\n\n    gl.drawArrays(gl.TRIANGLE_FAN, 0, vertexCount);\n};\n};\n\nrun(draw(gl))\n"]}