function e(e){return e&&e.__esModule?e.default:e}(async()=>{const r=document.querySelector("canvas");if(null===r)throw new Error("Canvas is null");if(!navigator.gpu)throw new Error("WebGPU not supported on this browser.");const t=await navigator.gpu.requestAdapter();if(!t)throw new Error("No appropriate GPUAdapter found.");const n=await t.requestDevice(),a=r.getContext("webgpu");if(null===a)throw new Error("Context is null");const o=navigator.gpu.getPreferredCanvasFormat();a.configure({device:n,format:o});const i=new Float32Array([-.8,-.8,.8,-.8,.8,.8,-.8,-.8,-.8,.8,.8,.8]),u=n.createBuffer({label:"Cell vertices",size:i.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});n.queue.writeBuffer(u,0,i);const l=n.createShaderModule({label:"Cell shader",code:e("@vertex\r\nfn vertexMain(@location(0) pos: vec2f) -> @builtin(position) vec4f {\r\n    return vec4f(pos, 0, 1);\r\n}\r\n\r\n@fragment\r\nfn fragmentMain() -> @location(0) vec4f {\r\n    return vec4f(1, 0, 0, 1);\r\n}\r\n")}),s=n.createRenderPipeline({label:"Cell pipeline",layout:"auto",vertex:{module:l,entryPoint:"vertexMain",buffers:[{arrayStride:8,attributes:[{format:"float32x2",offset:0,shaderLocation:0}]}]},fragment:{module:l,entryPoint:"fragmentMain",targets:[{format:o}]}}),f=n.createCommandEncoder(),c=f.beginRenderPass({colorAttachments:[{view:a.getCurrentTexture().createView(),loadOp:"clear",clearValue:{r:0,g:0,b:.4,a:1},storeOp:"store"}]});c.setPipeline(s),c.setVertexBuffer(0,u),c.draw(i.length/2),c.end(),n.queue.submit([f.finish()])})();
//# sourceMappingURL=index.c9447eb8.js.map
